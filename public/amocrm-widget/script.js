/**
 * –í–∏–¥–∂–µ—Ç "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞" –¥–ª—è amoCRM
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∞–¥—Ä–µ—Å–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –≤ —Å–¥–µ–ª–∫–µ
 */

define(['jquery'], function($) {
  'use strict';

  var CustomWidget = function() {
    var self = this;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
    this.settings = {};
    
    // –ö—ç—à –∞–¥—Ä–µ—Å–æ–≤
    this.addressCache = new Map();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
    this.isInitialized = false;
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤
    this.MAX_ADDRESSES = 20;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.CONFIG = {
      DEBOUNCE_DELAY: 300,
      MIN_QUERY_LENGTH: 2,
      MAX_SUGGESTIONS: 10
    };

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
     */
    this.init = function() {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
        self.settings = self.get_settings();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (self.settings.search_delay) {
          self.CONFIG.DEBOUNCE_DELAY = parseInt(self.settings.search_delay);
        }
        if (self.settings.max_addresses) {
          self.MAX_ADDRESSES = parseInt(self.settings.max_addresses);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        var currentPage = self.get_system().area;
        
        if (currentPage === 'ccard') {
          // –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
          self.initContactCard();
        } else if (currentPage === 'lcard') {
          // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–¥–µ–ª–∫–∏
          self.initLeadCard();
        }
        
        self.isInitialized = true;
        
        return true;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞:', error);
        return false;
      }
    };

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    this.initContactCard = function() {
      console.log('üìá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        var contactId = self.get_system().amoid;
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏
        self.createAddressManager(contactId);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞
        self.loadContactAddresses(contactId);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
      }
    };

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–¥–µ–ª–∫–∏
     */
    this.initLeadCard = function() {
      console.log('üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–¥–µ–ª–∫–∏');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–¥–µ–ª–∫–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        var leadId = self.get_system().amoid;
        var contactId = self.getLeadContactId(leadId);
        
        if (contactId) {
          // –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏
          self.createAddressSelector(contactId, leadId);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–µ–ª–∫–∏:', error);
      }
    };

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    this.createAddressManager = function(contactId) {
      try {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
        var container = $('<div>', {
          class: 'address-manager',
          html: '<h3>–ê–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞</h3>'
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
        var addressesList = $('<div>', {
          class: 'addresses-list'
        });
        
        container.append(addressesList);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        var addButton = $('<button>', {
          class: 'add-address-btn',
          text: '+ –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å',
          click: function() {
            self.addNewAddressField(contactId);
          }
        });
        
        container.append(addButton);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        $('.card-edit-widgets').append(container);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
      }
    };

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∞–¥—Ä–µ—Å–∞
     */
    this.addNewAddressField = function(contactId) {
      try {
        var currentCount = $('.address-field').length;
        
        if (currentCount >= self.MAX_ADDRESSES) {
          alert('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ (' + self.MAX_ADDRESSES + ')');
          return;
        }
        
        var addressField = $('<div>', {
          class: 'address-field',
          html: `
            <input type="text" class="address-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å">
            <input type="radio" name="main_address" value="${currentCount}">
            <label>–û—Å–Ω–æ–≤–Ω–æ–π</label>
            <button class="remove-address-btn">–£–¥–∞–ª–∏—Ç—å</button>
          `
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
        addressField.find('.remove-address-btn').click(function() {
          addressField.remove();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        addressField.find('input[type="radio"]').change(function() {
          $('input[name="main_address"]').prop('checked', false);
          $(this).prop('checked', true);
        });
        
        $('.addresses-list').append(addressField);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞:', error);
      }
    };

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    this.loadContactAddresses = function(contactId) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è
        var addresses = self.get_custom_field_value(contactId, 'addresses_list');
        
        if (addresses && addresses.length > 0) {
          addresses.forEach(function(address, index) {
            self.addNewAddressField(contactId);
            var field = $('.address-field').eq(index);
            field.find('.address-input').val(address.short);
            if (address.is_main) {
              field.find('input[type="radio"]').prop('checked', true);
            }
          });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤:', error);
      }
    };

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–¥–µ–ª–∫–∏
     */
    this.createAddressSelector = function(contactId, leadId) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        var addresses = self.get_custom_field_value(contactId, 'addresses_list');
        
        if (addresses && addresses.length > 0) {
          var container = $('<div>', {
            class: 'address-selector',
            html: '<h3>–í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞</h3>'
          });
          
          var select = $('<select>', {
            class: 'address-select'
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
          addresses.forEach(function(address) {
            var option = $('<option>', {
              value: address.short,
              text: address.short,
              selected: address.is_main
            });
            select.append(option);
          });
          
          container.append(select);
          
          // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É
          $('.card-edit-widgets').append(container);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
      }
    };

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ —Å–¥–µ–ª–∫–∏
     */
    this.getLeadContactId = function(leadId) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ —Å–¥–µ–ª–∫–∏
        var lead = self.get_entity(leadId, 'leads');
        return lead.contact_id;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        return null;
      }
    };

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
     */
    this.saveAddresses = function(contactId) {
      try {
        var addresses = [];
        var mainIndex = $('input[name="main_address"]:checked').val();
        
        $('.address-field').each(function(index) {
          var address = $(this).find('.address-input').val().trim();
          if (address) {
            addresses.push({
              short: address,
              is_main: (index == mainIndex)
            });
          }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ
        self.set_custom_field_value(contactId, 'addresses_list', addresses);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å –≤ —Å–¥–µ–ª–∫—É
        if (mainIndex !== undefined && addresses[mainIndex]) {
          var leadId = self.get_system().amoid;
          if (self.get_system().area === 'lcard') {
            self.set_custom_field_value(leadId, 'main_address', addresses[mainIndex].short);
          }
        }
        
        console.log('‚úÖ –ê–¥—Ä–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤:', error);
      }
    };

    /**
     * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    this.debounce = function(func, wait) {
      var timeout;
      return function executedFunction() {
        var later = function() {
          clearTimeout(timeout);
          func();
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    };

    /**
     * –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ API
     */
    this.searchAddresses = function(query, callback) {
      try {
        if (query.length < self.CONFIG.MIN_QUERY_LENGTH) {
          callback([]);
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self.addressCache.has(query)) {
          callback(self.addressCache.get(query));
          return;
        }
        
        // –ó–∞–ø—Ä–æ—Å –∫ API
        $.ajax({
          url: self.settings.api_url,
          method: 'GET',
          data: { q: query },
          success: function(data) {
            var suggestions = data.slice(0, self.CONFIG.MAX_SUGGESTIONS);
            self.addressCache.set(query, suggestions);
            callback(suggestions);
          },
          error: function() {
            callback([]);
          }
        });
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
        callback([]);
      }
    };

    return this;
  };

  return CustomWidget;
});
