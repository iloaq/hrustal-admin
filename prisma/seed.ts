import { PrismaClient } from '@/generated/prisma';

const prisma = new PrismaClient();

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤
const DEFAULT_REGION_MAPPING = {
  '–¶–µ–Ω—Ç—Ä': '–ú–∞—à–∏–Ω–∞ 1',
  '–í–æ–∫–∑–∞–ª': '–ú–∞—à–∏–Ω–∞ 2',
  '–¶–µ–Ω—Ç—Ä –ü–ó': '–ú–∞—à–∏–Ω–∞ 3',
  '–í–æ–∫–∑–∞–ª –ü–ó': '–ú–∞—à–∏–Ω–∞ 4',
  '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è': '–ú–∞—à–∏–Ω–∞ 5',
  '–ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã': '–ú–∞—à–∏–Ω–∞ 6'
};

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  await prisma.order.deleteMany();
  await prisma.regionOverride.deleteMany();
  await prisma.driverAssignment.deleteMany();
  await prisma.vehicleDistrictSchedule.deleteMany();
  await prisma.vehicleDistrict.deleteMany();
  await prisma.driverVehicle.deleteMany();
  await prisma.driverDistrict.deleteMany();
  await prisma.driver.deleteMany();
  await prisma.vehicle.deleteMany();
  await prisma.district.deleteMany();

  // –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω—ã
  console.log('üìç –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤...');
  const districts = await Promise.all([
    prisma.district.create({ data: { name: '–¶–µ–Ω—Ç—Ä', description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞' } }),
    prisma.district.create({ data: { name: '–í–æ–∫–∑–∞–ª', description: '–†–∞–π–æ–Ω –≤–æ–∫–∑–∞–ª–∞' } }),
    prisma.district.create({ data: { name: '–¶–µ–Ω—Ç—Ä –ü–ó', description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ä–∞–π–æ–Ω' } }),
    prisma.district.create({ data: { name: '–í–æ–∫–∑–∞–ª –ü–ó', description: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ä–∞–π–æ–Ω –≤–æ–∫–∑–∞–ª–∞' } }),
    prisma.district.create({ data: { name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è', description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω' } }),
    prisma.district.create({ data: { name: '–ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã', description: '–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã' } })
  ]);

  // –°–æ–∑–¥–∞–µ–º –º–∞—à–∏–Ω—ã
  console.log('üöó –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω...');
  const vehicles = await Promise.all([
    prisma.vehicle.create({ 
      data: { 
        name: '–ú–∞—à–∏–Ω–∞ 1', 
        brand: '–ì–ê–ó–µ–ª—å Next', 
        license_plate: '–ê001–ê–ê77', 
        capacity: 2000 
      } 
    }),
    prisma.vehicle.create({ 
      data: { 
        name: '–ú–∞—à–∏–Ω–∞ 2', 
        brand: '–ì–ê–ó–µ–ª—å Next', 
        license_plate: '–í002–í–í77', 
        capacity: 2000 
      } 
    }),
    prisma.vehicle.create({ 
      data: { 
        name: '–ú–∞—à–∏–Ω–∞ 3', 
        brand: '–ì–ê–ó–µ–ª—å Business', 
        license_plate: '–°003–°–°77', 
        capacity: 1800 
      } 
    }),
    prisma.vehicle.create({ 
      data: { 
        name: '–ú–∞—à–∏–Ω–∞ 4', 
        brand: '–ì–ê–ó–µ–ª—å Business', 
        license_plate: '–î004–î–î77', 
        capacity: 1800 
      } 
    }),
    prisma.vehicle.create({ 
      data: { 
        name: '–ú–∞—à–∏–Ω–∞ 5', 
        brand: 'Ford Transit', 
        license_plate: '–ï005–ï–ï77', 
        capacity: 2200 
      } 
    }),
    prisma.vehicle.create({ 
      data: { 
        name: '–ú–∞—à–∏–Ω–∞ 6', 
        brand: 'Ford Transit', 
        license_plate: '–ö006–ö–ö77', 
        capacity: 2200 
      } 
    })
  ]);

  // –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
  console.log('üë®‚Äçüíº –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π...');
  const drivers = await Promise.all([
    prisma.driver.create({
      data: {
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        phone: '+7-900-111-11-11',
        login: 'driver1',
        pin_code: '1111',
        license_number: 'AA111111',
        status: 'online'
      }
    }),
    prisma.driver.create({
      data: {
        name: '–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤',
        phone: '+7-900-222-22-22',
        login: 'driver2',
        pin_code: '2222',
        license_number: 'BB222222',
        status: 'online'
      }
    }),
    prisma.driver.create({
      data: {
        name: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤',
        phone: '+7-900-333-33-33',
        login: 'driver3',
        pin_code: '3333',
        license_number: 'CC333333',
        status: 'online'
      }
    }),
    prisma.driver.create({
      data: {
        name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        phone: '+7-900-444-44-44',
        login: 'driver4',
        pin_code: '4444',
        license_number: 'DD444444',
        status: 'offline'
      }
    }),
    prisma.driver.create({
      data: {
        name: '–ù–∏–∫–æ–ª–∞–π –í–æ–ª–∫–æ–≤',
        phone: '+7-900-555-55-55',
        login: 'driver5',
        pin_code: '5555',
        license_number: 'EE555555',
        status: 'online'
      }
    }),
    prisma.driver.create({
      data: {
        name: '–í–ª–∞–¥–∏–º–∏—Ä –ú–µ–¥–≤–µ–¥–µ–≤',
        phone: '+7-900-666-66-66',
        login: 'driver6',
        pin_code: '6666',
        license_number: 'FF666666',
        status: 'online'
      }
    })
  ]);

  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫ –º–∞—à–∏–Ω–∞–º
  console.log('üîó –ü—Ä–∏–≤—è–∑–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫ –º–∞—à–∏–Ω–∞–º...');
  for (let i = 0; i < drivers.length; i++) {
    await prisma.driverVehicle.create({
      data: {
        driver_id: drivers[i].id,
        vehicle_id: vehicles[i].id,
        is_primary: true
      }
    });
  }

  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–∞—à–∏–Ω—ã –∫ —Ä–∞–π–æ–Ω–∞–º (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
  console.log('üó∫Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
  const districtMap = new Map(districts.map(d => [d.name, d]));
  const vehicleMap = new Map(vehicles.map(v => [v.name, v]));

  for (const [regionName, vehicleName] of Object.entries(DEFAULT_REGION_MAPPING)) {
    const district = districtMap.get(regionName);
    const vehicle = vehicleMap.get(vehicleName);
    
    if (district && vehicle) {
      await prisma.vehicleDistrict.create({
        data: {
          vehicle_id: vehicle.id,
          district_id: district.id
        }
      });
    }
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const testOrders = [
    // –ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    {
      external_id: 'CRM-001',
      customer_name: '–û–û–û "–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞"',
      customer_phone: '+7-495-123-45-67',
      customer_address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10',
      region: '–¶–µ–Ω—Ç—Ä',
      products: {
        items: [
          { name: '–í–æ–¥–∞ 19–ª', quantity: 10, price: 200 },
          { name: '–ü–æ–º–ø–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è', quantity: 1, price: 300 }
        ]
      },
      total_amount: 2300,
      delivery_date: today,
      delivery_time: '10:00-12:00',
      status: 'new'
    },
    {
      external_id: 'CRM-002',
      customer_name: '–ò–ü –°–∏–¥–æ—Ä–æ–≤ –ê.–ê.',
      customer_phone: '+7-495-234-56-78',
      customer_address: '–ü—Ä–∏–≤–æ–∫–∑–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –¥. 5',
      region: '–í–æ–∫–∑–∞–ª',
      products: {
        items: [
          { name: '–í–æ–¥–∞ 19–ª', quantity: 5, price: 200 }
        ]
      },
      total_amount: 1000,
      delivery_date: today,
      delivery_time: '14:00-16:00',
      status: 'assigned',
      driver_id: drivers[1].id,
      vehicle_id: vehicles[1].id,
      assigned_at: new Date()
    },
    {
      external_id: 'CRM-003',
      customer_name: '–ó–∞–≤–æ–¥ "–ú–µ—Ç–∞–ª–ª–∏—Å—Ç"',
      customer_phone: '+7-495-345-67-89',
      customer_address: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —É–ª., –¥. 15',
      region: '–¶–µ–Ω—Ç—Ä –ü–ó',
      products: {
        items: [
          { name: '–í–æ–¥–∞ 19–ª', quantity: 20, price: 200 },
          { name: '–ö—É–ª–µ—Ä –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π', quantity: 2, price: 5000 }
        ]
      },
      total_amount: 14000,
      delivery_date: today,
      delivery_time: '09:00-11:00',
      status: 'accepted',
      driver_id: drivers[2].id,
      vehicle_id: vehicles[2].id,
      assigned_at: new Date(),
      accepted_at: new Date()
    },
    // –ó–∞–∫–∞–∑—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    {
      external_id: 'CRM-004',
      customer_name: '–ú–∞–≥–∞–∑–∏–Ω "–ü—Ä–æ–¥—É–∫—Ç—ã 24"',
      customer_phone: '+7-495-456-78-90',
      customer_address: '—É–ª. –ú–∏—Ä–∞, –¥. 25',
      region: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è',
      products: {
        items: [
          { name: '–í–æ–¥–∞ 19–ª', quantity: 15, price: 200 }
        ]
      },
      total_amount: 3000,
      delivery_date: tomorrow,
      delivery_time: '11:00-13:00',
      status: 'new'
    },
    {
      external_id: 'CRM-005',
      customer_name: '–û—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–ë–∏–∑–Ω–µ—Å"',
      customer_phone: '+7-495-567-89-01',
      customer_address: '–î–µ–ª–æ–≤–∞—è —É–ª., –¥. 1',
      region: '–ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã',
      products: {
        items: [
          { name: '–í–æ–¥–∞ 19–ª', quantity: 30, price: 200 },
          { name: '–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏ 200—à—Ç', quantity: 10, price: 100 }
        ]
      },
      total_amount: 7000,
      delivery_date: tomorrow,
      delivery_time: '15:00-17:00',
      status: 'new'
    }
  ];

  for (const orderData of testOrders) {
    await prisma.order.create({ data: orderData as any });
  }

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ overrides –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö overrides –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...');
  const todayOverrides = [
    { region: '–¶–µ–Ω—Ç—Ä', vehicleName: '–ú–∞—à–∏–Ω–∞ 1' },
    { region: '–í–æ–∫–∑–∞–ª', vehicleName: '–ú–∞—à–∏–Ω–∞ 2' },
    { region: '–¶–µ–Ω—Ç—Ä –ü–ó', vehicleName: '–ú–∞—à–∏–Ω–∞ 3' },
    { region: '–í–æ–∫–∑–∞–ª –ü–ó', vehicleName: '–ú–∞—à–∏–Ω–∞ 4' },
    { region: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è', vehicleName: '–ú–∞—à–∏–Ω–∞ 5' },
    { region: '–ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã', vehicleName: '–ú–∞—à–∏–Ω–∞ 6' }
  ];

  for (const override of todayOverrides) {
    const vehicle = vehicles.find(v => v.name === override.vehicleName);
    if (vehicle) {
      await prisma.regionOverride.create({
        data: {
          date: today,
          region: override.region,
          vehicle_id: vehicle.id,
          created_by: 'seed_script',
          notes: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'
        }
      });
    }
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π override –Ω–∞ –∑–∞–≤—Ç—Ä–∞
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ override –Ω–∞ –∑–∞–≤—Ç—Ä–∞...');
  await prisma.regionOverride.create({
    data: {
      date: tomorrow,
      region: '–¶–µ–Ω—Ç—Ä',
      vehicle_id: vehicles[4].id, // –ú–∞—à–∏–Ω–∞ 5 –±—É–¥–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –¶–µ–Ω—Ç—Ä –∑–∞–≤—Ç—Ä–∞
      created_by: 'admin',
      notes: '–ú–∞—à–∏–Ω–∞ 1 –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏'
    }
  });

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = {
    districts: await prisma.district.count(),
    vehicles: await prisma.vehicle.count(),
    drivers: await prisma.driver.count(),
    orders: await prisma.order.count(),
    overrides: await prisma.regionOverride.count()
  };

  console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   - –†–∞–π–æ–Ω–æ–≤: ${stats.districts}`);
  console.log(`   - –ú–∞—à–∏–Ω: ${stats.vehicles}`);
  console.log(`   - –í–æ–¥–∏—Ç–µ–ª–µ–π: ${stats.drivers}`);
  console.log(`   - –ó–∞–∫–∞–∑–æ–≤: ${stats.orders}`);
  console.log(`   - Overrides: ${stats.overrides}`);
  
  console.log('\nüë§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π:');
  drivers.forEach((driver, i) => {
    console.log(`   ${driver.name}: –ª–æ–≥–∏–Ω ${driver.login}, PIN ${driver.pin_code}`);
  });
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e);
    await prisma.$disconnect();
    process.exit(1);
  });
