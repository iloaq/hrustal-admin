import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function restoreTestData() {
  try {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã, –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Ä–∞–π–æ–Ω—ã
    const vehicles = await prisma.vehicle.findMany();
    const drivers = await prisma.driver.findMany();
    const districts = await prisma.district.findMany();

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${vehicles.length} –º–∞—à–∏–Ω, ${drivers.length} –≤–æ–¥–∏—Ç–µ–ª–µ–π, ${districts.length} —Ä–∞–π–æ–Ω–æ–≤`);

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫ –º–∞—à–∏–Ω–∞–º (–ø–æ 1-2 –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –º–∞—à–∏–Ω—É)
    const driverVehicleAssignments = [
      { driverId: '10', vehicleId: '22' }, // –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ -> –ú–∞—à–∏–Ω–∞ 1
      { driverId: '9', vehicleId: '22' },  // –°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤ -> –ú–∞—à–∏–Ω–∞ 1
      { driverId: '12', vehicleId: '20' }, // –î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤ -> –ú–∞—à–∏–Ω–∞ 2
      { driverId: '13', vehicleId: '20' },  // –ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤ -> –ú–∞—à–∏–Ω–∞ 2
      { driverId: '8', vehicleId: '19' },  // –ù–∏–∫–æ–ª–∞–π –í–æ–ª–∫–æ–≤ -> –ú–∞—à–∏–Ω–∞ 3
      { driverId: '11', vehicleId: '21' }, // –í–ª–∞–¥–∏–º–∏—Ä –ú–µ–¥–≤–µ–¥–µ–≤ -> –ú–∞—à–∏–Ω–∞ 4
      { driverId: '10', vehicleId: '18' }, // –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ -> –ú–∞—à–∏–Ω–∞ 5 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
      { driverId: '9', vehicleId: '23' },  // –°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤ -> –ú–∞—à–∏–Ω–∞ 6 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
    ];

    for (const assignment of driverVehicleAssignments) {
      try {
        await prisma.driverVehicle.create({
          data: {
            driver_id: assignment.driverId,
            vehicle_id: assignment.vehicleId,
            assigned_at: new Date(),
            is_primary: Math.random() > 0.5 // –°–ª—É—á–∞–π–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
          }
        });
        console.log(`‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å ${assignment.driverId} –∫ –º–∞—à–∏–Ω–µ ${assignment.vehicleId}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ü—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: –≤–æ–¥–∏—Ç–µ–ª—å ${assignment.driverId} -> –º–∞—à–∏–Ω–∞ ${assignment.vehicleId}`);
      }
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–∞–π–æ–Ω—ã –∫ –º–∞—à–∏–Ω–∞–º
    const vehicleDistrictAssignments = [
      { vehicleId: '22', districtId: '12' }, // –ú–∞—à–∏–Ω–∞ 1 -> –¶–µ–Ω—Ç—Ä
      { vehicleId: '22', districtId: '13' }, // –ú–∞—à–∏–Ω–∞ 1 -> –í–æ–∫–∑–∞–ª
      { vehicleId: '20', districtId: '14' }, // –ú–∞—à–∏–Ω–∞ 2 -> –ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
      { vehicleId: '20', districtId: '15' }, // –ú–∞—à–∏–Ω–∞ 2 -> –¶–µ–Ω—Ç—Ä –ü–ó
      { vehicleId: '19', districtId: '16' }, // –ú–∞—à–∏–Ω–∞ 3 -> –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è
      { vehicleId: '19', districtId: '17' }, // –ú–∞—à–∏–Ω–∞ 3 -> –í–æ–∫–∑–∞–ª –ü–ó
      { vehicleId: '21', districtId: '12' }, // –ú–∞—à–∏–Ω–∞ 4 -> –¶–µ–Ω—Ç—Ä
      { vehicleId: '21', districtId: '14' }, // –ú–∞—à–∏–Ω–∞ 4 -> –ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
      { vehicleId: '18', districtId: '15' }, // –ú–∞—à–∏–Ω–∞ 5 -> –¶–µ–Ω—Ç—Ä –ü–ó
      { vehicleId: '18', districtId: '16' }, // –ú–∞—à–∏–Ω–∞ 5 -> –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è
      { vehicleId: '23', districtId: '13' }, // –ú–∞—à–∏–Ω–∞ 6 -> –í–æ–∫–∑–∞–ª
      { vehicleId: '23', districtId: '17' }, // –ú–∞—à–∏–Ω–∞ 6 -> –í–æ–∫–∑–∞–ª –ü–ó
    ];

    for (const assignment of vehicleDistrictAssignments) {
      try {
        await prisma.vehicleDistrict.create({
          data: {
            vehicle_id: assignment.vehicleId,
            district_id: assignment.districtId,
            assigned_at: new Date()
          }
        });
        console.log(`‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω —Ä–∞–π–æ–Ω ${assignment.districtId} –∫ –º–∞—à–∏–Ω–µ ${assignment.vehicleId}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ü—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: —Ä–∞–π–æ–Ω ${assignment.districtId} -> –º–∞—à–∏–Ω–∞ ${assignment.vehicleId}`);
      }
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫ —Ä–∞–π–æ–Ω–∞–º (—á–µ—Ä–µ–∑ –º–∞—à–∏–Ω—ã)
    const driverDistrictAssignments = [
      { driverId: '10', districtId: '12' }, // –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ -> –¶–µ–Ω—Ç—Ä
      { driverId: '10', districtId: '13' }, // –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ -> –í–æ–∫–∑–∞–ª
      { driverId: '9', districtId: '12' },   // –°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤ -> –¶–µ–Ω—Ç—Ä
      { driverId: '9', districtId: '13' },  // –°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤ -> –í–æ–∫–∑–∞–ª
      { driverId: '12', districtId: '14' }, // –î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤ -> –ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
      { driverId: '12', districtId: '15' }, // –î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤ -> –¶–µ–Ω—Ç—Ä –ü–ó
      { driverId: '13', districtId: '14' }, // –ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤ -> –ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
      { driverId: '13', districtId: '15' }, // –ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤ -> –¶–µ–Ω—Ç—Ä –ü–ó
      { driverId: '8', districtId: '16' },  // –ù–∏–∫–æ–ª–∞–π –í–æ–ª–∫–æ–≤ -> –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è
      { driverId: '8', districtId: '17' },  // –ù–∏–∫–æ–ª–∞–π –í–æ–ª–∫–æ–≤ -> –í–æ–∫–∑–∞–ª –ü–ó
      { driverId: '11', districtId: '12' }, // –í–ª–∞–¥–∏–º–∏—Ä –ú–µ–¥–≤–µ–¥–µ–≤ -> –¶–µ–Ω—Ç—Ä
      { driverId: '11', districtId: '14' }, // –í–ª–∞–¥–∏–º–∏—Ä –ú–µ–¥–≤–µ–¥–µ–≤ -> –ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
    ];

    for (const assignment of driverDistrictAssignments) {
      try {
        await prisma.driverDistrict.create({
          data: {
            driver_id: assignment.driverId,
            district_id: assignment.districtId,
            assigned_at: new Date()
          }
        });
        console.log(`‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å ${assignment.driverId} –∫ —Ä–∞–π–æ–Ω—É ${assignment.districtId}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ü—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: –≤–æ–¥–∏—Ç–µ–ª—å ${assignment.driverId} -> —Ä–∞–π–æ–Ω ${assignment.districtId}`);
      }
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const finalStats = await prisma.$transaction([
      prisma.driverVehicle.count(),
      prisma.vehicleDistrict.count(),
      prisma.driverDistrict.count()
    ]);

    console.log(`üìä –ò—Ç–æ–≥–æ –ø—Ä–∏–≤—è–∑–æ–∫:`);
    console.log(`   - –í–æ–¥–∏—Ç–µ–ª–∏ –∫ –º–∞—à–∏–Ω–∞–º: ${finalStats[0]}`);
    console.log(`   - –†–∞–π–æ–Ω—ã –∫ –º–∞—à–∏–Ω–∞–º: ${finalStats[1]}`);
    console.log(`   - –í–æ–¥–∏—Ç–µ–ª–∏ –∫ —Ä–∞–π–æ–Ω–∞–º: ${finalStats[2]}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

restoreTestData();
