import { PrismaClient } from '@/generated/prisma';

const prisma = new PrismaClient();

async function seedLogisticsData() {
  console.log('üöõ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏...');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω—ã
    const districts = [
      { name: '–¶–µ–Ω—Ç—Ä', description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞' },
      { name: '–í–æ–∫–∑–∞–ª', description: '–†–∞–π–æ–Ω –≤–æ–∫–∑–∞–ª–∞' },
      { name: '–¶–µ–Ω—Ç—Ä –ü–ó', description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ä–∞–π–æ–Ω' },
      { name: '–í–æ–∫–∑–∞–ª –ü–ó', description: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ä–∞–π–æ–Ω –≤–æ–∫–∑–∞–ª–∞' },
      { name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è', description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω' },
      { name: '–ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã', description: '–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã' }
    ];

    console.log('üìç –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤...');
    for (const district of districts) {
      await prisma.district.upsert({
        where: { name: district.name },
        update: {},
        create: district
      });
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞—à–∏–Ω—ã
    const vehicles = [
      { name: '–ú–∞—à–∏–Ω–∞ 1', brand: '–ì–ê–ó–µ–ª—å', license_plate: '–ê123–ë–í77', capacity: 1500 },
      { name: '–ú–∞—à–∏–Ω–∞ 2', brand: '–ì–ê–ó–µ–ª—å', license_plate: '–í456–ì–î77', capacity: 1500 },
      { name: '–ú–∞—à–∏–Ω–∞ 3', brand: '–ì–ê–ó–µ–ª—å', license_plate: '–ì789–ï–ñ77', capacity: 1500 },
      { name: '–ú–∞—à–∏–Ω–∞ 4', brand: '–ì–ê–ó–µ–ª—å', license_plate: '–î012–ó–ò77', capacity: 1500 },
      { name: '–ú–∞—à–∏–Ω–∞ 5', brand: '–ì–ê–ó–µ–ª—å', license_plate: '–ï345–ö–õ77', capacity: 1500 },
      { name: '–ú–∞—à–∏–Ω–∞ 6', brand: '–ì–ê–ó–µ–ª—å', license_plate: '–ñ678–ú–ù77', capacity: 1500 }
    ];

    console.log('üöó –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω...');
    for (const vehicle of vehicles) {
      await prisma.vehicle.upsert({
        where: { name: vehicle.name },
        update: {},
        create: vehicle
      });
    }

    // –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const drivers = [
      { name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', phone: '+7-900-123-45-67', login: 'driver1', pin_code: '1234', license_number: '1234567890' },
      { name: '–°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤', phone: '+7-900-234-56-78', login: 'driver2', pin_code: '2345', license_number: '2345678901' },
      { name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', phone: '+7-900-345-67-89', login: 'driver3', pin_code: '3456', license_number: '3456789012' },
      { name: '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤', phone: '+7-900-456-78-90', login: 'driver4', pin_code: '4567', license_number: '4567890123' },
      { name: '–ù–∏–∫–æ–ª–∞–π –ú–µ–¥–≤–µ–¥–µ–≤', phone: '+7-900-567-89-01', login: 'driver5', pin_code: '5678', license_number: '5678901234' },
      { name: '–í–ª–∞–¥–∏–º–∏—Ä –û—Ä–ª–æ–≤', phone: '+7-900-678-90-12', login: 'driver6', pin_code: '6789', license_number: '6789012345' }
    ];

    console.log('üë®‚Äçüíº –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π...');
    for (const driver of drivers) {
      await prisma.driver.upsert({
        where: { login: driver.login },
        update: {},
        create: driver
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const createdDistricts = await prisma.district.findMany();
    const createdVehicles = await prisma.vehicle.findMany();
    const createdDrivers = await prisma.driver.findMany();

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–∞–π–æ–Ω—ã –º–∞—à–∏–Ω–∞–º (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
    console.log('üó∫Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤ –º–∞—à–∏–Ω–∞–º...');
    const districtVehicleMapping = [
      { district: '–¶–µ–Ω—Ç—Ä', vehicle: '–ú–∞—à–∏–Ω–∞ 1' },
      { district: '–í–æ–∫–∑–∞–ª', vehicle: '–ú–∞—à–∏–Ω–∞ 2' },
      { district: '–¶–µ–Ω—Ç—Ä –ü–ó', vehicle: '–ú–∞—à–∏–Ω–∞ 3' },
      { district: '–í–æ–∫–∑–∞–ª –ü–ó', vehicle: '–ú–∞—à–∏–Ω–∞ 4' },
      { district: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è', vehicle: '–ú–∞—à–∏–Ω–∞ 5' },
      { district: '–ò–Ω—ã–µ —Ä–∞–π–æ–Ω—ã', vehicle: '–ú–∞—à–∏–Ω–∞ 6' }
    ];

    for (const mapping of districtVehicleMapping) {
      const district = createdDistricts.find((d: any) => d.name === mapping.district);
      const vehicle = createdVehicles.find((v: any) => v.name === mapping.vehicle);

      if (district && vehicle) {
        await prisma.vehicleDistrict.upsert({
          where: {
            vehicle_id_district_id: {
              vehicle_id: vehicle.id,
              district_id: district.id
            }
          },
          update: {},
          create: {
            vehicle_id: vehicle.id,
            district_id: district.id
          }
        });
      }
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –º–∞—à–∏–Ω–∞–º
    console.log('üë®‚Äçüíº –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –º–∞—à–∏–Ω–∞–º...');
    for (let i = 0; i < createdDrivers.length && i < createdVehicles.length; i++) {
      await prisma.driverVehicle.upsert({
        where: {
          driver_id_vehicle_id: {
            driver_id: createdDrivers[i].id,
            vehicle_id: createdVehicles[i].id
          }
        },
        update: {},
        create: {
          driver_id: createdDrivers[i].id,
          vehicle_id: createdVehicles[i].id,
          is_primary: true
        }
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–µ–∑ RegionOverride
    console.log('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    for (const mapping of districtVehicleMapping) {
      const vehicle = createdVehicles.find((v: any) => v.name === mapping.vehicle);

      if (vehicle) {
        await prisma.regionOverride.upsert({
          where: {
            date_region: {
              date: today,
              region: mapping.district
            }
          },
          update: {},
          create: {
            date: today,
            region: mapping.district,
            vehicle_id: vehicle.id,
            created_by: 'seed_script',
            notes: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'
          }
        });
      }
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ:`);
    console.log(`   - –†–∞–π–æ–Ω–æ–≤: ${createdDistricts.length}`);
    console.log(`   - –ú–∞—à–∏–Ω: ${createdVehicles.length}`);
    console.log(`   - –í–æ–¥–∏—Ç–µ–ª–µ–π: ${createdDrivers.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  seedLogisticsData()
    .then(() => {
      console.log('üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export default seedLogisticsData;
