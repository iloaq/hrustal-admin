import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@/generated/prisma';
import { notifyOrderStatusChange } from '../../../lib/webhook';

const prisma = new PrismaClient();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
function getLatestAssignment(truckAssignments: any[]) {
  if (!truckAssignments || truckAssignments.length === 0) return null;
  return truckAssignments
    .sort((a: any, b: any) => new Date(b.assigned_at).getTime() - new Date(a.assigned_at).getTime())[0];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –≤–æ–¥–∏—Ç–µ–ª—é
async function getDriverTruck(driverId: bigint): Promise<string | null> {
  try {
    // –ú–∞–ø–ø–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫ –º–∞—à–∏–Ω–∞–º
    const driverTruckMapping: Record<string, string> = {
      '10': '–ú–∞—à–∏–Ω–∞ 1',          // –í–æ–¥–∏—Ç–µ–ª—å 10 -> –ú–∞—à–∏–Ω–∞ 1
      '9': '–ú–∞—à–∏–Ω–∞ 2',           // –í–æ–¥–∏—Ç–µ–ª—å 9 -> –ú–∞—à–∏–Ω–∞ 2
      '13': '–ú–∞—à–∏–Ω–∞ 3',          // –í–æ–¥–∏—Ç–µ–ª—å 13 -> –ú–∞—à–∏–Ω–∞ 3
      '12': '–ú–∞—à–∏–Ω–∞ 4',          // –í–æ–¥–∏—Ç–µ–ª—å 12 -> –ú–∞—à–∏–Ω–∞ 4
      '8': '–ú–∞—à–∏–Ω–∞ 5',           // –í–æ–¥–∏—Ç–µ–ª—å 8 -> –ú–∞—à–∏–Ω–∞ 5 (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)
      '11': '–ú–∞—à–∏–Ω–∞ 6'           // –í–æ–¥–∏—Ç–µ–ª—å 11 -> –ú–∞—à–∏–Ω–∞ 6 (–∏–Ω—ã–µ —Ä–∞–π–æ–Ω—ã)
    };
    
    return driverTruckMapping[driverId.toString()] || null;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    return null;
  }
}

// GET /api/orders - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (—Ç–µ–ø–µ—Ä—å –∏–∑ leads)
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const driver_id = searchParams.get('driver_id');
    const date = searchParams.get('date');
    const regions_only = searchParams.get('regions_only');

    if (driver_id) {
      // –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—É, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –≤–æ–¥–∏—Ç–µ–ª—é
      const driverTruck = await getDriverTruck(BigInt(driver_id));
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–π–æ–Ω—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      if (regions_only === 'true') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–π–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        const truckRegionMapping: Record<string, string[]> = {
          '–ú–∞—à–∏–Ω–∞ 1': ['–¶–µ–Ω—Ç—Ä'],
          '–ú–∞—à–∏–Ω–∞ 2': ['–í–æ–∫–∑–∞–ª'],
          '–ú–∞—à–∏–Ω–∞ 3': ['–¶–µ–Ω—Ç—Ä –ü/–ó'],
          '–ú–∞—à–∏–Ω–∞ 4': ['–í–æ–∫–∑–∞–ª –ü/–ó'],
          '–ú–∞—à–∏–Ω–∞ 5': ['–ú–∞—à–∏–Ω–∞ 5'],
          '–ú–∞—à–∏–Ω–∞ 6': ['–ú–∞—à–∏–Ω–∞ 6']
        };
        const regions = driverTruck ? truckRegionMapping[driverTruck] || [] : [];
        
        return NextResponse.json({
          success: true,
          regions: regions,
          truck: driverTruck
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ leads –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
      const allLeads = await prisma.lead.findMany({
        where: date ? { delivery_date: new Date(date) } : {},
        include: {
          truck_assignments: true
        },
        orderBy: [
          { delivery_date: 'asc' },
          { delivery_time: 'asc' }
        ]
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      const filteredLeads = allLeads.filter((lead: any) => {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        const assignment = getLatestAssignment(lead.truck_assignments);
        const assignedTruck = assignment?.truck_name;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ –º–∞—à–∏–Ω—É –≤–æ–¥–∏—Ç–µ–ª—è
        const isAssignedToDriverTruck = driverTruck && assignedTruck === driverTruck;
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'completed' –∏–ª–∏ 'cancelled'
        const isCompleted = assignment?.status === 'completed' || assignment?.status === 'cancelled';
        
        const info = typeof lead.info === 'string' ? JSON.parse(lead.info) : lead.info;
        console.log(`üîç –ó–∞–∫–∞–∑ ${lead.lead_id}: —Ä–∞–π–æ–Ω=${info?.region}, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è_–º–∞—à–∏–Ω–∞=${assignedTruck}, –º–∞—à–∏–Ω–∞_–≤–æ–¥–∏—Ç–µ–ª—è=${driverTruck}, isAssignedToDriverTruck=${isAssignedToDriverTruck}, status=${assignment?.status}, isCompleted=${isCompleted}`);
        
        return isAssignedToDriverTruck && !isCompleted;
      });

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º leads –≤ —Ñ–æ—Ä–º–∞—Ç orders
      const orders = filteredLeads.map((lead: any) => {
        const info = typeof lead.info === 'string' ? JSON.parse(lead.info) : lead.info;
        return {
          id: lead.lead_id.toString(),
          external_id: lead.lead_id.toString(),
          customer_name: info?.name || '',
          customer_phone: info?.phone || '',
          customer_address: info?.delivery_address || '',
          region: info?.region || '',
          products: typeof lead.products === 'string' ? JSON.parse(lead.products) : lead.products || {},
          total_amount: info?.price ? parseFloat(info.price) : 0,
          delivery_date: lead.delivery_date,
          delivery_time: lead.delivery_time || null,
          status: (() => {
            const assignment = getLatestAssignment(lead.truck_assignments);
            console.log(`üîç –ó–∞–∫–∞–∑ ${lead.lead_id}: truck_assignment status = ${assignment?.status}`);
            if (!assignment) return 'pending';
            if (assignment.status === 'active') return 'assigned';
            if (assignment.status === 'accepted') return 'accepted';
            if (assignment.status === 'completed') return 'completed';
            if (assignment.status === 'cancelled') return 'cancelled';
            return assignment.status || 'assigned';
          })(),
          driver: {
            id: driver_id,
            name: '–í–æ–¥–∏—Ç–µ–ª—å',
            phone: '+7-000-000-00-00'
          },
          vehicle: {
            id: '22',
            name: getLatestAssignment(lead.truck_assignments)?.truck_name || '–ú–∞—à–∏–Ω–∞',
            license_plate: '–ê001–ê–ê77'
          },
          assigned_at: getLatestAssignment(lead.truck_assignments)?.assigned_at || lead.created_at,
          accepted_at: null, // –≠—Ç–∏ –ø–æ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å—Ö–µ–º–µ TruckAssignment
          started_at: null,
          completed_at: null,
          cancelled_at: null,
          cancellation_reason: null,
          driver_notes: getLatestAssignment(lead.truck_assignments)?.notes || null
        };
      });

      return NextResponse.json({
        success: true,
        orders
      });
    }

    // –ï—Å–ª–∏ driver_id –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      orders: []
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// PUT /api/orders - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
export async function PUT(request: NextRequest) {
  try {
    const data = await request.json();
    const { id, status, driver_notes } = data;

    if (!id || !status) {
      return NextResponse.json(
        { success: false, error: 'ID –∏ —Å—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ leads —á–µ—Ä–µ–∑ truck_assignments
    const updateData: any = {};
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏
    updateData.status = status;
    
    if (driver_notes) {
      updateData.notes = driver_notes;
    }

    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º truck_assignment –¥–ª—è —ç—Ç–æ–≥–æ lead_id
    const truckAssignment = await prisma.truckAssignment.findFirst({
      where: {
        lead_id: BigInt(id)
      },
      orderBy: {
        assigned_at: 'desc' // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
      }
    });

    console.log(`üîç –ù–∞–π–¥–µ–Ω truck_assignment –¥–ª—è –∑–∞–∫–∞–∑–∞ ${id}:`, {
      id: truckAssignment?.id?.toString(),
      status: truckAssignment?.status,
      truck_name: truckAssignment?.truck_name,
      assigned_at: truckAssignment?.assigned_at
    });

    if (!truckAssignment) {
      return NextResponse.json(
        { success: false, error: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º truck_assignment ${truckAssignment.id} –Ω–∞ —Å—Ç–∞—Ç—É—Å:`, status);
    console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateData);

    // –û–±–Ω–æ–≤–ª—è–µ–º truck_assignment –ø–æ –µ–≥–æ ID
    const updatedAssignment = await prisma.truckAssignment.update({
      where: {
        id: truckAssignment.id
      },
      data: updateData
    });

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω truck_assignment ${updatedAssignment.id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:`, updatedAssignment.status);
    console.log(`‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ assignment:`, {
      id: updatedAssignment.id.toString(),
      status: updatedAssignment.status,
      notes: updatedAssignment.notes,
      truck_name: updatedAssignment.truck_name,
      assigned_at: updatedAssignment.assigned_at
    });

    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –≤ n8n
    if (updatedAssignment) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è webhook
        const lead = await prisma.lead.findUnique({
          where: { lead_id: BigInt(id) },
          include: {
            truck_assignments: {
              where: { id: updatedAssignment.id },
              take: 1
            }
          }
        });

        if (lead && lead.truck_assignments.length > 0) {
          const assignment = lead.truck_assignments[0];
          const info = lead.info as any;

          await notifyOrderStatusChange(
            id,
            status,
            {
              id: assignment.driver_id?.toString() || '',
              name: '–í–æ–¥–∏—Ç–µ–ª—å'
            },
            {
              customer_name: info?.name || '',
              customer_phone: info?.phone || '',
              customer_address: info?.delivery_address || '',
              total_amount: info?.price ? parseFloat(info.price) : 0,
              delivery_date: lead.delivery_date?.toISOString().split('T')[0] || '',
              delivery_time: lead.delivery_time || ''
            },
            driver_notes
          );
        }
      } catch (webhookError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook:', webhookError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ webhook –Ω–µ —É–¥–∞–ª—Å—è
      }
    }

    return NextResponse.json({
      success: true,
      message: '–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω',
      updated: true
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// POST /api/orders - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    const { customer_name, region, delivery_date, products, total_amount, driver_id, vehicle_id } = data;

    if (!customer_name || !region || !delivery_date) {
      return NextResponse.json(
        { success: false, error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: customer_name, region, delivery_date' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lead
    const newLead = await prisma.lead.create({
      data: {
        lead_id: BigInt(Date.now()), // –ü—Ä–æ—Å—Ç–æ–π ID
        name: customer_name,
        delivery_date: new Date(delivery_date),
        products: products || {},
        info: {
          name: customer_name,
          region: region,
          delivery_address: data.customer_address || '',
          price: total_amount?.toString() || '0'
        },
        delivery_time: data.delivery_time || '09:00-18:00',
        created_at: new Date(),
        updated_at: new Date()
      }
    });

    // –°–æ–∑–¥–∞–µ–º truck_assignment –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã driver_id –∏ vehicle_id
    if (driver_id && vehicle_id) {
      await prisma.truckAssignment.create({
        data: {
          lead_id: newLead.lead_id,
          truck_name: `–ú–∞—à–∏–Ω–∞ ${vehicle_id}`,
          delivery_date: new Date(delivery_date),
          delivery_time: data.delivery_time || '09:00-18:00',
          assigned_at: new Date(),
          status: 'active'
        }
      });
    }

    return NextResponse.json({
      success: true,
      order: {
        id: newLead.lead_id.toString(),
        status: driver_id ? 'assigned' : 'pending'
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}