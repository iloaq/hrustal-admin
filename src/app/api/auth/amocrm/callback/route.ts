import { NextResponse } from 'next/server';

// Redirect URI endpoint –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AmoCRM
// URL: https://dashboard-hrustal.skybric.com/api/auth/amocrm/callback

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const code = searchParams.get('code');
    const state = searchParams.get('state');
    const referer = searchParams.get('referer');
    const platform = searchParams.get('platform');
    
    console.log('üîê AmoCRM callback received:', {
      code: code ? 'present' : 'missing',
      state,
      referer,
      platform,
      timestamp: new Date().toISOString()
    });

    if (!code) {
      return NextResponse.json(
        { error: 'Authorization code not provided' },
        { status: 400 }
      );
    }

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ AmoCRM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:
    /*
    const tokenResponse = await fetch('https://{subdomain}.amocrm.ru/oauth2/access_token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        client_id: process.env.AMOCRM_CLIENT_ID,
        client_secret: process.env.AMOCRM_CLIENT_SECRET,
        grant_type: 'authorization_code',
        code: code,
        redirect_uri: process.env.AMOCRM_REDIRECT_URI
      })
    });
    */

    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
    const successPage = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞</title>
        <style>
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                display: flex; align-items: center; justify-content: center;
                min-height: 100vh; margin: 0; background: #f5f5f5;
            }
            .success-card {
                background: white; padding: 40px; border-radius: 12px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.1); text-align: center;
                max-width: 400px;
            }
            .success-icon { font-size: 4em; margin-bottom: 20px; }
            h1 { color: #28a745; margin-bottom: 15px; }
            p { color: #666; line-height: 1.6; }
            .close-btn {
                background: #28a745; color: white; border: none;
                padding: 12px 24px; border-radius: 6px; font-size: 16px;
                cursor: pointer; margin-top: 20px;
            }
        </style>
    </head>
    <body>
        <div class="success-card">
            <div class="success-icon">‚úÖ</div>
            <h1>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!</h1>
            <p>–í–∏–¥–∂–µ—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –≤–∞—à–∏–º AmoCRM.</p>
            <p><small>–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${code.substring(0, 8)}...</small></p>
            <button class="close-btn" onclick="window.close()">–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ</button>
        </div>
        <script>
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => window.close(), 5000);
        </script>
    </body>
    </html>`;

    return new NextResponse(successPage, {
      headers: { 'Content-Type': 'text/html; charset=utf-8' }
    });

  } catch (error) {
    console.error('‚ùå Error in AmoCRM callback:', error);
    
    const errorPage = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</title>
        <style>
            body { 
                font-family: Arial, sans-serif; display: flex; 
                align-items: center; justify-content: center;
                min-height: 100vh; margin: 0; background: #f5f5f5;
            }
            .error-card {
                background: white; padding: 40px; border-radius: 12px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.1); text-align: center;
                max-width: 400px;
            }
            .error-icon { font-size: 4em; margin-bottom: 20px; }
            h1 { color: #dc3545; margin-bottom: 15px; }
        </style>
    </head>
    <body>
        <div class="error-card">
            <div class="error-icon">‚ùå</div>
            <h1>–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h1>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</p>
            <button onclick="window.close()">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    </body>
    </html>`;

    return new NextResponse(errorPage, {
      status: 500,
      headers: { 'Content-Type': 'text/html; charset=utf-8' }
    });
  }
}

export async function POST(request: Request) {
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  return GET(request);
}
