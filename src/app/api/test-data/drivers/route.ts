import { NextResponse } from 'next/server';
import { PrismaClient } from '@/generated/prisma';

const prisma = new PrismaClient();

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π
export async function POST() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π...');

    // 1. –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω—ã
    const districts = [
      { name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –≥–æ—Ä–æ–¥–∞' },
      { name: '–°–µ–≤–µ—Ä–Ω—ã–π', description: '–°–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã' },
      { name: '–Æ–∂–Ω—ã–π', description: '–Æ–∂–Ω—ã–µ —Ä–∞–π–æ–Ω—ã' },
      { name: '–í–æ—Å—Ç–æ—á–Ω—ã–π', description: '–í–æ—Å—Ç–æ—á–Ω—ã–µ —Ä–∞–π–æ–Ω—ã' },
      { name: '–ó–∞–ø–∞–¥–Ω—ã–π', description: '–ó–∞–ø–∞–¥–Ω—ã–µ —Ä–∞–π–æ–Ω—ã' },
      { name: '–ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–π', description: '–ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–µ –∑–æ–Ω—ã' }
    ];

    const createdDistricts = [];
    for (const districtData of districts) {
      const existing = await prisma.district.findFirst({
        where: { name: districtData.name }
      });
      
      if (!existing) {
        const district = await prisma.district.create({
          data: districtData
        });
        createdDistricts.push(district);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ä–∞–π–æ–Ω: ${district.name}`);
      } else {
        createdDistricts.push(existing);
        console.log(`üìã –†–∞–π–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existing.name}`);
      }
    }

    // 2. –°–æ–∑–¥–∞–µ–º –º–∞—à–∏–Ω—ã
    const vehicles = [
      { name: '–ì–ê–ó–µ–ª—å-3302', brand: '–ì–ê–ó', license_plate: '–ê123–ë–í77', capacity: 1500 },
      { name: 'Ford Transit', brand: 'Ford', license_plate: '–í456–ì–î77', capacity: 1200 },
      { name: 'Mercedes Sprinter', brand: 'Mercedes', license_plate: '–°789–ï–ñ77', capacity: 1800 },
      { name: 'Volkswagen Crafter', brand: 'VW', license_plate: '–î012–ó–ò77', capacity: 1600 },
      { name: 'Renault Master', brand: 'Renault', license_plate: '–ï345–ö–õ77', capacity: 1400 },
      { name: 'Iveco Daily', brand: 'Iveco', license_plate: '–ñ678–ú–ù77', capacity: 1700 },
      { name: '–ì–ê–ó–µ–ª—å NEXT', brand: '–ì–ê–ó', license_plate: '–ó901–û–ü77', capacity: 1600 },
      { name: 'Hyundai Porter', brand: 'Hyundai', license_plate: '–ò234–†–°77', capacity: 1000 }
    ];

    const createdVehicles = [];
    for (const vehicleData of vehicles) {
      const existing = await prisma.vehicle.findFirst({
        where: { name: vehicleData.name }
      });
      
      if (!existing) {
        const vehicle = await prisma.vehicle.create({
          data: vehicleData
        });
        createdVehicles.push(vehicle);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∞—à–∏–Ω–∞: ${vehicle.name} (${vehicle.license_plate})`);
      } else {
        createdVehicles.push(existing);
        console.log(`üìã –ú–∞—à–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existing.name}`);
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const drivers = [
      { 
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', 
        phone: '+7-777-123-45-67', 
        login: 'ivan_petrov',
        license_number: '77–ê–ê123456',
        pin_code: '1234'
      },
      { 
        name: '–°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤', 
        phone: '+7-777-234-56-78', 
        login: 'sergey_sidorov',
        license_number: '77–ë–ë234567',
        pin_code: '2345'
      },
      { 
        name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', 
        phone: '+7-777-345-67-89', 
        login: 'alexey_kozlov',
        license_number: '77–í–í345678',
        pin_code: '3456'
      },
      { 
        name: '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤', 
        phone: '+7-777-456-78-90', 
        login: 'dmitry_volkov',
        license_number: '77–ì–ì456789',
        pin_code: '4567'
      },
      { 
        name: '–ù–∏–∫–æ–ª–∞–π –ú–µ–¥–≤–µ–¥–µ–≤', 
        phone: '+7-777-567-89-01', 
        login: 'nikolay_medvedev',
        license_number: '77–î–î567890',
        pin_code: '5678'
      },
      { 
        name: '–í–ª–∞–¥–∏–º–∏—Ä –û—Ä–ª–æ–≤', 
        phone: '+7-777-678-90-12', 
        login: 'vladimir_orlov',
        license_number: '77–ï–ï678901',
        pin_code: '6789'
      }
    ];

    const createdDrivers = [];
    for (const driverData of drivers) {
      const existing = await prisma.driver.findFirst({
        where: { login: driverData.login }
      });
      
      if (!existing) {
        const driver = await prisma.driver.create({
          data: driverData
        });
        createdDrivers.push(driver);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: ${driver.name} (PIN: ${driver.pin_code})`);
      } else {
        createdDrivers.push(existing);
        console.log(`üìã –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existing.name}`);
      }
    }

    // 4. –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è–º —Ä–∞–π–æ–Ω—ã (–ø–æ 2-3 —Ä–∞–π–æ–Ω–∞ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è)
    for (let i = 0; i < createdDrivers.length; i++) {
      const driver = createdDrivers[i];
      const startIndex = i * 2;
      const endIndex = Math.min(startIndex + 2, createdDistricts.length);
      
      for (let j = startIndex; j < endIndex; j++) {
        const district = createdDistricts[j];
        
        const existing = await prisma.driverDistrict.findFirst({
          where: {
            driver_id: driver.id,
            district_id: district.id
          }
        });
        
        if (!existing) {
          await prisma.driverDistrict.create({
            data: {
              driver_id: driver.id,
              district_id: district.id,
              is_active: true
            }
          });
          console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω —Ä–∞–π–æ–Ω ${district.name} –≤–æ–¥–∏—Ç–µ–ª—é ${driver.name}`);
        }
      }
    }

    // 5. –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è–º –º–∞—à–∏–Ω—ã (–ø–æ 1-2 –º–∞—à–∏–Ω—ã –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è)
    for (let i = 0; i < createdDrivers.length; i++) {
      const driver = createdDrivers[i];
      const vehicle = createdVehicles[i % createdVehicles.length];
      
      const existing = await prisma.driverVehicle.findFirst({
        where: {
          driver_id: driver.id,
          vehicle_id: vehicle.id
        }
      });
      
      if (!existing) {
        await prisma.driverVehicle.create({
          data: {
            driver_id: driver.id,
            vehicle_id: vehicle.id,
            is_active: true,
            is_primary: true
          }
        });
        console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –º–∞—à–∏–Ω–∞ ${vehicle.name} –≤–æ–¥–∏—Ç–µ–ª—é ${driver.name}`);
      }
    }

    // 6. –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—à–∏–Ω—ã —Ä–∞–π–æ–Ω–∞–º
    for (let i = 0; i < createdVehicles.length; i++) {
      const vehicle = createdVehicles[i];
      const district = createdDistricts[i % createdDistricts.length];
      
      const existing = await prisma.vehicleDistrict.findFirst({
        where: {
          vehicle_id: vehicle.id,
          district_id: district.id
        }
      });
      
      if (!existing) {
        await prisma.vehicleDistrict.create({
          data: {
            vehicle_id: vehicle.id,
            district_id: district.id,
            is_active: true
          }
        });
        console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –º–∞—à–∏–Ω–∞ ${vehicle.name} —Ä–∞–π–æ–Ω—É ${district.name}`);
      }
    }

    // 7. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const todayDate = new Date(today);
    todayDate.setHours(0, 0, 0, 0);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞)
    const testLeads = [];
    const dates = [todayDate, tomorrow];
    
    for (let dateIndex = 0; dateIndex < dates.length; dateIndex++) {
      const currentDate = dates[dateIndex];
      const startIndex = dateIndex * 10 + 1;
      const endIndex = startIndex + 9;
      
      for (let i = startIndex; i <= endIndex; i++) {
      const leadData = {
        lead_id: BigInt(900000 + i),
        name: `–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ ${i}`,
        status_id: BigInt(142),
        status_name: '–ù–æ–≤–∞—è',
        responsible_user_id: BigInt(12345),
        responsible_user_name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
        created_at: new Date(),
        updated_at: new Date(),
        delivery_date: currentDate,
        delivery_time: `${9 + (i % 8)}:00`,
        info: JSON.stringify({
          name: `–ö–ª–∏–µ–Ω—Ç ${i}`,
          phone: `+7-777-${String(i).padStart(3, '0')}-${String(i).padStart(2, '0')}-${String(i).padStart(2, '0')}`,
          delivery_address: `${createdDistricts[i % createdDistricts.length].name}, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è ${i}, –¥. ${i}`,
          comment: `–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π`
        }),
        products: JSON.stringify({
          [`product_${i}`]: {
            name: `–¢–æ–≤–∞—Ä ${i}`,
            quantity: Math.floor(Math.random() * 5) + 1,
            price: (Math.random() * 1000 + 500).toFixed(2)
          }
        }),
        price: (Math.random() * 2000 + 1000).toFixed(2),
        stat_oplata: Math.random() > 0.5 ? 1 : 0,
        comment: `–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ ${i} –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π`
      };

      const existingLead = await prisma.lead.findUnique({
        where: { lead_id: leadData.lead_id }
      });

      if (!existingLead) {
        const lead = await prisma.lead.create({
          data: leadData
        });
        testLeads.push(lead);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑: ${lead.name}`);
      } else {
        testLeads.push(existingLead);
        console.log(`üìã –ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingLead.name}`);
      }
    }
    }

    console.log(`üìã –°–æ–∑–¥–∞–Ω–æ ${testLeads.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è–º
    for (let i = 0; i < testLeads.length; i++) {
      const lead = testLeads[i];
      const driver = createdDrivers[i % createdDrivers.length];
      
      const existing = await prisma.driverAssignment.findFirst({
        where: {
          driver_id: driver.id,
          lead_id: lead.lead_id,
          delivery_date: testLeads[i].delivery_date
        }
      });
      
      if (!existing) {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—É –≤–æ–¥–∏—Ç–µ–ª—è
        const driverVehicle = await prisma.driverVehicle.findFirst({
          where: {
            driver_id: driver.id,
            is_active: true
          },
          include: {
            vehicle: true
          }
        });

        await prisma.driverAssignment.create({
          data: {
            driver_id: driver.id,
            lead_id: lead.lead_id,
            vehicle_id: driverVehicle?.vehicle_id,
            delivery_date: testLeads[i].delivery_date,
            delivery_time: lead.delivery_time || '10:00',
            status: 'assigned'
          }
        });
        console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –∑–∞–∫–∞–∑ ${lead.name} –≤–æ–¥–∏—Ç–µ–ª—é ${driver.name}`);
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
    return NextResponse.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã',
      stats: {
        districts: createdDistricts.length,
        vehicles: createdVehicles.length,
        drivers: createdDrivers.length,
        assignments: existingLeads.length
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', details: error },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
