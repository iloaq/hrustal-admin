import { NextResponse } from 'next/server';
import { PrismaClient } from '@/generated/prisma';

const prisma = new PrismaClient();

// –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
export async function POST() {
  try {
    console.log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...');

    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const drivers = await prisma.driver.findMany({
      where: { is_active: true },
      include: {
        driver_districts: {
          include: {
            district: true
          }
        },
        driver_vehicles: {
          where: { is_active: true },
          include: {
            vehicle: true
          }
        }
      }
    });

    if (drivers.length === 0) {
      return NextResponse.json(
        { error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–π–æ–Ω—ã
    const districts = await prisma.district.findMany({
      where: { is_active: true }
    });

    if (districts.length === 0) {
      return NextResponse.json(
        { error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤' },
        { status: 400 }
      );
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // –°–æ–∑–¥–∞–µ–º –ø–æ 2-3 –∑–∞–∫–∞–∑–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    let createdCount = 0;
    
    for (const driver of drivers) {
      const ordersPerDriver = 2 + Math.floor(Math.random() * 2); // 2-3 –∑–∞–∫–∞–∑–∞
      
      for (let i = 1; i <= ordersPerDriver; i++) {
        const orderId = BigInt(Date.now() + createdCount * 1000);
        const district = districts[Math.floor(Math.random() * districts.length)];
        
        const leadData = {
          lead_id: orderId,
          name: `–ó–∞–∫–∞–∑ ${driver.name} #${i}`,
          status_id: BigInt(142),
          status_name: '–ù–æ–≤–∞—è',
          responsible_user_id: BigInt(12345),
          responsible_user_name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
          created_at: new Date(),
          updated_at: new Date(),
          delivery_date: today,
          delivery_time: `${9 + (i % 8)}:00`,
          info: JSON.stringify({
            name: `–ö–ª–∏–µ–Ω—Ç ${driver.name} #${i}`,
            phone: `+7-777-${String(createdCount).padStart(3, '0')}-${String(createdCount).padStart(2, '0')}-${String(createdCount).padStart(2, '0')}`,
            delivery_address: `${district.name}, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è ${createdCount + 1}, –¥. ${createdCount + 1}`,
            comment: `–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ –¥–ª—è ${driver.name}`
          }),
          products: JSON.stringify({
            [`product_${createdCount}`]: {
              name: `–¢–æ–≤–∞—Ä –¥–ª—è ${driver.name}`,
              quantity: Math.floor(Math.random() * 3) + 1,
              price: (Math.random() * 1500 + 800).toFixed(2)
            }
          }),
          price: (Math.random() * 2500 + 1000).toFixed(2),
          stat_oplata: Math.random() > 0.3 ? 1 : 0,
          comment: `–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ ${i} –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ${driver.name}`
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑
        const existingLead = await prisma.lead.findUnique({
          where: { lead_id: leadData.lead_id }
        });

        if (!existingLead) {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
          const lead = await prisma.lead.create({
            data: leadData
          });

          // –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—é
          const driverVehicle = driver.driver_vehicles.find(dv => dv.is_primary) || driver.driver_vehicles[0];
          
          const existingAssignment = await prisma.driverAssignment.findFirst({
            where: {
              driver_id: driver.id,
              lead_id: lead.lead_id,
              delivery_date: today
            }
          });

          if (!existingAssignment) {
            await prisma.driverAssignment.create({
              data: {
                driver_id: driver.id,
                lead_id: lead.lead_id,
                vehicle_id: driverVehicle?.vehicle_id,
                delivery_date: today,
                delivery_time: lead.delivery_time || '10:00',
                status: 'assigned'
              }
            });
            
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–∫–∞–∑ "${lead.name}" –≤–æ–¥–∏—Ç–µ–ª—é ${driver.name}`);
            createdCount++;
          }
        }
      }
    }

    console.log(`\nüéâ –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–Ω–æ ${createdCount} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!`);
    
    return NextResponse.json({
      success: true,
      message: `–°–æ–∑–¥–∞–Ω–æ ${createdCount} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è`,
      count: createdCount
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤', details: error },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
