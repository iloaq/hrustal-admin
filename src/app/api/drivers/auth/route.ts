import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '../../../../generated/prisma';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ PIN-–∫–æ–¥—É
export async function POST(request: NextRequest) {
  try {
    const { pin_code } = await request.json();
    
    if (!pin_code) {
      return NextResponse.json(
        { error: 'PIN-–∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    // –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ PIN-–∫–æ–¥—É
    const driver = await prisma.driver.findFirst({
      where: {
        pin_code,
        is_active: true
      },
      include: {
        driver_districts: {
          where: { is_active: true },
          include: {
            district: true
          }
        },
        driver_vehicles: {
          where: { is_active: true },
          include: {
            vehicle: true
          }
        }
      }
    });
    
    if (!driver) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' },
        { status: 401 }
      );
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ "online"
    await prisma.driver.update({
      where: { id: driver.id },
      data: { 
        status: 'online',
        updated_at: new Date()
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        driverId: driver.id.toString(),
        name: driver.name,
        login: driver.login
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
    const driverData = {
      id: driver.id.toString(),
      name: driver.name,
      phone: driver.phone,
      login: driver.login,
      license_number: driver.license_number,
      status: 'online',
      districts: driver.driver_districts.map((dd: any) => ({
        id: dd.district.id.toString(),
        name: dd.district.name,
        description: dd.district.description
      })),
      vehicles: driver.driver_vehicles.map((dv: any) => ({
        id: dv.vehicle.id.toString(),
        name: dv.vehicle.name,
        brand: dv.vehicle.brand,
        license_plate: dv.vehicle.license_plate,
        capacity: dv.vehicle.capacity,
        is_primary: dv.is_primary,
        is_active: dv.vehicle.is_active
      }))
    };
    
    console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å ${driver.name} (ID: ${driver.id}) –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É`);
    
    return NextResponse.json({
      success: true,
      token,
      driver: driverData,
      message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${driver.name}!`
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' },
        { status: 401 }
      );
    }

    const token = authHeader.substring(7);

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as any;
      
      const driver = await prisma.driver.findUnique({
        where: { id: BigInt(decoded.driverId) },
        include: {
          driver_districts: {
            where: { is_active: true },
            include: {
              district: true
            }
          },
          driver_vehicles: {
            where: { is_active: true },
            include: {
              vehicle: true
            }
          }
        }
      });

      if (!driver) {
        return NextResponse.json(
          { error: '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      const driverData = {
        id: driver.id.toString(),
        name: driver.name,
        phone: driver.phone,
        login: driver.login,
        license_number: driver.license_number,
        status: driver.status,
        districts: driver.driver_districts.map((dd: any) => ({
          id: dd.district.id.toString(),
          name: dd.district.name,
          description: dd.district.description
        })),
        vehicles: driver.driver_vehicles.map((dv: any) => ({
          id: dv.vehicle.id.toString(),
          name: dv.vehicle.name,
          brand: dv.vehicle.brand,
          license_plate: dv.vehicle.license_plate,
          capacity: dv.vehicle.capacity,
          is_primary: dv.is_primary,
          is_active: dv.vehicle.is_active
        }))
      };

      return NextResponse.json({
        success: true,
        driver: driverData
      });

    } catch (jwtError) {
      return NextResponse.json(
        { error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      );
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// –í—ã—Ö–æ–¥ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
export async function DELETE(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    const token = authHeader?.replace('Bearer ', '');
    
    if (!token) {
      return NextResponse.json(
        { error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' },
        { status: 401 }
      );
    }
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, JWT_SECRET) as any;
    const driverId = BigInt(decoded.driverId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ "offline"
    await prisma.driver.update({
      where: { id: driverId },
      data: { 
        status: 'offline',
        updated_at: new Date()
      }
    });
    
    console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å ID: ${driverId} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã`);
    
    return NextResponse.json({
      success: true,
      message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
