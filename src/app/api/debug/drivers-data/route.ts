import { NextResponse } from 'next/server';
import { PrismaClient } from '@/generated/prisma';

const prisma = new PrismaClient();

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π
export async function GET() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π...');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const drivers = await prisma.driver.findMany({
      include: {
        driver_districts: {
          include: {
            district: true
          }
        },
        driver_vehicles: {
          include: {
            vehicle: true
          }
        },
        driver_assignments: {
          where: {
            delivery_date: {
              gte: new Date(new Date().setHours(0, 0, 0, 0)),
              lt: new Date(new Date().setHours(23, 59, 59, 999))
            }
          },
          include: {
            lead: {
              select: {
                lead_id: true,
                name: true,
                info: true
              }
            }
          }
        }
      }
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—à–∏–Ω—ã
    const vehicles = await prisma.vehicle.findMany({
      include: {
        driver_vehicles: {
          include: {
            driver: true
          }
        },
        vehicle_districts: {
          include: {
            district: true
          }
        }
      }
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–π–æ–Ω—ã
    const districts = await prisma.district.findMany({
      include: {
        driver_districts: {
          include: {
            driver: true
          }
        },
        vehicle_districts: {
          include: {
            vehicle: true
          }
        }
      }
    });

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    const assignments = await prisma.driverAssignment.findMany({
      where: {
        delivery_date: {
          gte: new Date(new Date().setHours(0, 0, 0, 0)),
          lt: new Date(new Date().setHours(23, 59, 59, 999))
        }
      },
      include: {
        driver: true,
        lead: {
          select: {
            lead_id: true,
            name: true
          }
        },
        vehicle: true
      }
    });

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log(`  ‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: ${drivers.length}`);
    console.log(`  ‚Ä¢ –ú–∞—à–∏–Ω: ${vehicles.length}`);
    console.log(`  ‚Ä¢ –†–∞–π–æ–Ω–æ–≤: ${districts.length}`);
    console.log(`  ‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${assignments.length}`);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    drivers.forEach(driver => {
      console.log(`\nüë§ –í–æ–¥–∏—Ç–µ–ª—å: ${driver.name} (PIN: ${driver.pin_code})`);
      console.log(`  ‚Ä¢ –†–∞–π–æ–Ω–æ–≤: ${driver.driver_districts.length}`);
      console.log(`  ‚Ä¢ –ú–∞—à–∏–Ω: ${driver.driver_vehicles.length}`);
      console.log(`  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${driver.driver_assignments.length}`);
      console.log(`  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${driver.status}`);
      
      if (driver.driver_districts.length > 0) {
        console.log(`  ‚Ä¢ –†–∞–π–æ–Ω—ã: ${driver.driver_districts.map(dd => dd.district.name).join(', ')}`);
      }
      
      if (driver.driver_vehicles.length > 0) {
        console.log(`  ‚Ä¢ –ú–∞—à–∏–Ω—ã: ${driver.driver_vehicles.map(dv => dv.vehicle.name).join(', ')}`);
      }
    });

    vehicles.forEach(vehicle => {
      console.log(`\nüöó –ú–∞—à–∏–Ω–∞: ${vehicle.name} (${vehicle.license_plate || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'})`);
      console.log(`  ‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: ${vehicle.driver_vehicles.length}`);
      console.log(`  ‚Ä¢ –†–∞–π–æ–Ω–æ–≤: ${vehicle.vehicle_districts.length}`);
      console.log(`  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${vehicle.is_active ? '–ò—Å–ø—Ä–∞–≤–Ω–∞' : '–°–ª–æ–º–∞–Ω–∞'}`);
      
      if (vehicle.driver_vehicles.length > 0) {
        console.log(`  ‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: ${vehicle.driver_vehicles.map(dv => dv.driver.name).join(', ')}`);
      }
      
      if (vehicle.vehicle_districts.length > 0) {
        console.log(`  ‚Ä¢ –†–∞–π–æ–Ω—ã: ${vehicle.vehicle_districts.map(vd => vd.district.name).join(', ')}`);
      }
    });

    districts.forEach(district => {
      console.log(`\nüìç –†–∞–π–æ–Ω: ${district.name}`);
      console.log(`  ‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: ${district.driver_districts.length}`);
      console.log(`  ‚Ä¢ –ú–∞—à–∏–Ω: ${district.vehicle_districts.length}`);
      
      if (district.driver_districts.length > 0) {
        console.log(`  ‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: ${district.driver_districts.map(dd => dd.driver.name).join(', ')}`);
      }
      
      if (district.vehicle_districts.length > 0) {
        console.log(`  ‚Ä¢ –ú–∞—à–∏–Ω—ã: ${district.vehicle_districts.map(vd => vd.vehicle.name).join(', ')}`);
      }
    });

    return NextResponse.json({
      success: true,
      stats: {
        drivers: drivers.length,
        vehicles: vehicles.length,
        districts: districts.length,
        assignments: assignments.length
      },
      data: {
        drivers: drivers.map(driver => ({
          id: driver.id.toString(),
          name: driver.name,
          pin_code: driver.pin_code,
          status: driver.status,
          districts_count: driver.driver_districts.length,
          vehicles_count: driver.driver_vehicles.length,
          assignments_count: driver.driver_assignments.length,
          districts: driver.driver_districts.map(dd => dd.district.name),
          vehicles: driver.driver_vehicles.map(dv => dv.vehicle.name)
        })),
        vehicles: vehicles.map(vehicle => ({
          id: vehicle.id.toString(),
          name: vehicle.name,
          license_plate: vehicle.license_plate,
          is_active: vehicle.is_active,
          drivers_count: vehicle.driver_vehicles.length,
          districts_count: vehicle.vehicle_districts.length,
          drivers: vehicle.driver_vehicles.map(dv => dv.driver.name),
          districts: vehicle.vehicle_districts.map(vd => vd.district.name)
        })),
        districts: districts.map(district => ({
          id: district.id.toString(),
          name: district.name,
          drivers_count: district.driver_districts.length,
          vehicles_count: district.vehicle_districts.length,
          drivers: district.driver_districts.map(dd => dd.driver.name),
          vehicles: district.vehicle_districts.map(vd => vd.vehicle.name)
        })),
        assignments: assignments.map(assignment => ({
          id: assignment.id.toString(),
          driver_name: assignment.driver.name,
          lead_name: assignment.lead.name,
          vehicle_name: assignment.vehicle?.name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞',
          status: assignment.status,
          delivery_date: assignment.delivery_date
        }))
      },
      message: '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, —Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö', details: error },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
