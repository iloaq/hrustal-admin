import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@/generated/prisma';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const { order_id, new_status } = await request.json();

    if (!order_id || !new_status) {
      return NextResponse.json(
        { error: 'order_id –∏ new_status –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    console.log(`üß™ –¢–ï–°–¢: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${order_id} –Ω–∞ —Å—Ç–∞—Ç—É—Å ${new_status}`);

    // 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const leadBefore = await prisma.lead.findUnique({
      where: { lead_id: BigInt(order_id) },
      include: {
        truck_assignments: {
          orderBy: {
            assigned_at: 'desc'
          }
        }
      }
    });

    if (!leadBefore) {
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    const assignmentBefore = leadBefore.truck_assignments[0];
    console.log(`üß™ –¢–ï–°–¢: –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —Å—Ç–∞—Ç—É—Å: ${assignmentBefore?.status}`);

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (assignmentBefore) {
      const updatedAssignment = await prisma.truckAssignment.update({
        where: { id: assignmentBefore.id },
        data: { status: new_status }
      });
      console.log(`üß™ –¢–ï–°–¢: –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞: ${updatedAssignment.status}`);
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const leadAfter = await prisma.lead.findUnique({
      where: { lead_id: BigInt(order_id) },
      include: {
        truck_assignments: {
          orderBy: {
            assigned_at: 'desc'
          }
        }
      }
    });

    const assignmentAfter = leadAfter?.truck_assignments[0];
    console.log(`üß™ –¢–ï–°–¢: –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —Å—Ç–∞—Ç—É—Å: ${assignmentAfter?.status}`);

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–∫–∞–∑–æ–≤
    const ordersResponse = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/orders?driver_id=10&date=${new Date().toISOString().split('T')[0]}`);
    const ordersData = await ordersResponse.json();

    const foundOrder = ordersData.orders?.find((order: any) => order.id === order_id);
    console.log(`üß™ –¢–ï–°–¢: –í API orders –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑: ${!!foundOrder}, —Å—Ç–∞—Ç—É—Å: ${foundOrder?.status}`);

    return NextResponse.json({
      success: true,
      test_results: {
        order_id,
        before_update: {
          status: assignmentBefore?.status,
          assignment_id: assignmentBefore?.id?.toString()
        },
        after_update: {
          status: assignmentAfter?.status,
          assignment_id: assignmentAfter?.id?.toString()
        },
        api_orders_result: {
          found_in_api: !!foundOrder,
          api_status: foundOrder?.status,
          total_orders: ordersData.orders?.length || 0
        }
      }
    });

  } catch (error: any) {
    console.error('üß™ –¢–ï–°–¢: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
